//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""InGame"",
            ""id"": ""87cea95e-a208-4a51-9039-8aa00a2fc255"",
            ""actions"": [
                {
                    ""name"": ""Take/Discard"",
                    ""type"": ""Button"",
                    ""id"": ""8f3f0a7b-58e7-4f6f-ab1b-e97262e71409"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap card 1"",
                    ""type"": ""Button"",
                    ""id"": ""daf420f3-f051-4e18-b8dd-42bd60bb2344"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap card 2"",
                    ""type"": ""Button"",
                    ""id"": ""eb8d60d7-0c5b-41ca-a35a-e1a7258ca728"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap card 3"",
                    ""type"": ""Button"",
                    ""id"": ""5e8e5ea0-b268-48e2-b270-30f0b09ab724"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swap card 4"",
                    ""type"": ""Button"",
                    ""id"": ""014db0ae-6210-4250-9eef-4af601d7814d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""View Spoons"",
                    ""type"": ""Button"",
                    ""id"": ""64c005c9-3bab-483d-947e-f14ad8303f51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d531138a-6690-4e07-b3ef-904e4e44c009"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Take/Discard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72b5717b-0e3b-4915-8ee6-33f67dbcd670"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap card 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""536cdb8b-682d-43ef-8afd-d3c1ac09adc9"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap card 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91344ae7-527d-4a2c-a532-007d5afe7f9b"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap card 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29f0f9ac-02d9-41c8-b0ba-d7b7dd77153e"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap card 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9867d6b0-515c-4d6e-ac48-57fa48a191bb"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""View Spoons"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InGame
        m_InGame = asset.FindActionMap("InGame", throwIfNotFound: true);
        m_InGame_TakeDiscard = m_InGame.FindAction("Take/Discard", throwIfNotFound: true);
        m_InGame_Swapcard1 = m_InGame.FindAction("Swap card 1", throwIfNotFound: true);
        m_InGame_Swapcard2 = m_InGame.FindAction("Swap card 2", throwIfNotFound: true);
        m_InGame_Swapcard3 = m_InGame.FindAction("Swap card 3", throwIfNotFound: true);
        m_InGame_Swapcard4 = m_InGame.FindAction("Swap card 4", throwIfNotFound: true);
        m_InGame_ViewSpoons = m_InGame.FindAction("View Spoons", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGame
    private readonly InputActionMap m_InGame;
    private List<IInGameActions> m_InGameActionsCallbackInterfaces = new List<IInGameActions>();
    private readonly InputAction m_InGame_TakeDiscard;
    private readonly InputAction m_InGame_Swapcard1;
    private readonly InputAction m_InGame_Swapcard2;
    private readonly InputAction m_InGame_Swapcard3;
    private readonly InputAction m_InGame_Swapcard4;
    private readonly InputAction m_InGame_ViewSpoons;
    public struct InGameActions
    {
        private @PlayerInput m_Wrapper;
        public InGameActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TakeDiscard => m_Wrapper.m_InGame_TakeDiscard;
        public InputAction @Swapcard1 => m_Wrapper.m_InGame_Swapcard1;
        public InputAction @Swapcard2 => m_Wrapper.m_InGame_Swapcard2;
        public InputAction @Swapcard3 => m_Wrapper.m_InGame_Swapcard3;
        public InputAction @Swapcard4 => m_Wrapper.m_InGame_Swapcard4;
        public InputAction @ViewSpoons => m_Wrapper.m_InGame_ViewSpoons;
        public InputActionMap Get() { return m_Wrapper.m_InGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameActions set) { return set.Get(); }
        public void AddCallbacks(IInGameActions instance)
        {
            if (instance == null || m_Wrapper.m_InGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InGameActionsCallbackInterfaces.Add(instance);
            @TakeDiscard.started += instance.OnTakeDiscard;
            @TakeDiscard.performed += instance.OnTakeDiscard;
            @TakeDiscard.canceled += instance.OnTakeDiscard;
            @Swapcard1.started += instance.OnSwapcard1;
            @Swapcard1.performed += instance.OnSwapcard1;
            @Swapcard1.canceled += instance.OnSwapcard1;
            @Swapcard2.started += instance.OnSwapcard2;
            @Swapcard2.performed += instance.OnSwapcard2;
            @Swapcard2.canceled += instance.OnSwapcard2;
            @Swapcard3.started += instance.OnSwapcard3;
            @Swapcard3.performed += instance.OnSwapcard3;
            @Swapcard3.canceled += instance.OnSwapcard3;
            @Swapcard4.started += instance.OnSwapcard4;
            @Swapcard4.performed += instance.OnSwapcard4;
            @Swapcard4.canceled += instance.OnSwapcard4;
            @ViewSpoons.started += instance.OnViewSpoons;
            @ViewSpoons.performed += instance.OnViewSpoons;
            @ViewSpoons.canceled += instance.OnViewSpoons;
        }

        private void UnregisterCallbacks(IInGameActions instance)
        {
            @TakeDiscard.started -= instance.OnTakeDiscard;
            @TakeDiscard.performed -= instance.OnTakeDiscard;
            @TakeDiscard.canceled -= instance.OnTakeDiscard;
            @Swapcard1.started -= instance.OnSwapcard1;
            @Swapcard1.performed -= instance.OnSwapcard1;
            @Swapcard1.canceled -= instance.OnSwapcard1;
            @Swapcard2.started -= instance.OnSwapcard2;
            @Swapcard2.performed -= instance.OnSwapcard2;
            @Swapcard2.canceled -= instance.OnSwapcard2;
            @Swapcard3.started -= instance.OnSwapcard3;
            @Swapcard3.performed -= instance.OnSwapcard3;
            @Swapcard3.canceled -= instance.OnSwapcard3;
            @Swapcard4.started -= instance.OnSwapcard4;
            @Swapcard4.performed -= instance.OnSwapcard4;
            @Swapcard4.canceled -= instance.OnSwapcard4;
            @ViewSpoons.started -= instance.OnViewSpoons;
            @ViewSpoons.performed -= instance.OnViewSpoons;
            @ViewSpoons.canceled -= instance.OnViewSpoons;
        }

        public void RemoveCallbacks(IInGameActions instance)
        {
            if (m_Wrapper.m_InGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInGameActions instance)
        {
            foreach (var item in m_Wrapper.m_InGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InGameActions @InGame => new InGameActions(this);
    public interface IInGameActions
    {
        void OnTakeDiscard(InputAction.CallbackContext context);
        void OnSwapcard1(InputAction.CallbackContext context);
        void OnSwapcard2(InputAction.CallbackContext context);
        void OnSwapcard3(InputAction.CallbackContext context);
        void OnSwapcard4(InputAction.CallbackContext context);
        void OnViewSpoons(InputAction.CallbackContext context);
    }
}
